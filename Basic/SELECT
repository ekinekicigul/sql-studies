18.10.2024

# Kurumsal Çalışanlar Tablosu Üzerinde SQL Sorguları  

Bu dosya, **KurumsalCalısanlar** tablosu üzerinde gerçekleştirilebilecek temel SQL sorgularını içermektedir. Aşağıda, **veri seçme (SELECT), filtreleme (WHERE), karşılaştırma operatörleri, LIKE ile desen eşleme ve IN/NOT IN kullanımı** gibi SQL'in temel konularını içeren sorgular bulunmaktadır.  

---

## 1. Çalışanların Zamlı Maaşlarını Hesaplama  

```sql
SELECT *, Maas + Maas * 50 / 100 AS ZAMLI_MAAŞ 
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, **Maas** sütunundaki değere %50 zam ekleyerek **ZAMLI_MAAŞ** adında yeni bir sütun oluşturur ve tüm çalışanların bilgileriyle birlikte gösterir.  

---

## 2. Çalışanlardan Belirli Kolonları Seçme ve İsimlendirme  

```sql
SELECT Ad, Cinsiyet, Ulke AS ÜLKE 
FROM KurumsalCalısanlar;
```

**Açıklama:**  
- **AS** anahtar kelimesi, sütuna yeni bir ad vermek için kullanılır. Burada **Ulke** sütunu **ÜLKE** olarak yeniden adlandırılmıştır.  
- Bu sorgu, tüm çalışanların adlarını, cinsiyetlerini ve ülkelerini getirir.  

---

## 3. Belirli Bir Çalışanı Filtreleme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Ad = 'Onur';
```

**Açıklama:**  
- **WHERE** ifadesi belirli koşullara göre filtreleme yapmak için kullanılır.  
- Bu sorgu, adı "Onur" olan çalışanları getirir.  

---

## 4. Türkiye Dışındaki Çalışanları Listeleme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Ulke <> 'Türkiye';
```

**Açıklama:**  
- **<>** operatörü, **eşit değildir** anlamına gelir.  
- Alternatif olarak **!=** de kullanılabilir.  
- Bu sorgu, Türkiye dışında çalışan kişileri listeler.  

---

## 5. Maaşı Belirli Bir Aralıkta Olan Çalışanları Getirme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Maas BETWEEN 5000 AND 9000;
```

**Açıklama:**  
- **BETWEEN … AND …** ifadesi, iki değer arasındaki sonuçları filtrelemek için kullanılır.  
- Bu sorgu, maaşı **5000 ile 9000 arasında** olan çalışanları listeler.  

---

## 6. Belirli Ülkelerde Çalışanları Listeleme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE ULKE IN ('Türkiye', 'Fransa', 'Amerika');
```

**Açıklama:**  
- **IN** ifadesi, **OR** operatörünün daha kısa ve okunaklı bir alternatifidir.  
- Alternatif olarak şu şekilde de yazılabilir:  

  ```sql
  SELECT * FROM KurumsalCalısanlar 
  WHERE ULKE = 'Türkiye' OR Ulke = 'Fransa' OR Ulke = 'Amerika';
  ```
- Her iki sorgu da Türkiye, Fransa veya Amerika'da çalışanları listeler.  

---

## 7. LIKE Operatörü ile Metin Arama  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Ad LIKE 'O%';
```

**Açıklama:**  
- **LIKE** ifadesi, belirli bir desene uyan verileri getirmek için kullanılır.  
- **'O%'** ifadesi, "O" harfiyle başlayan tüm çalışanları getirir.  
- Alternatif kullanımlar:  
  - **'%T'** → "T" harfiyle biten çalışanları getirir.  
  - **'%U%'** → Adının içinde "U" harfi geçen çalışanları getirir.  
  - **'____'** → 4 harfli isimlere sahip çalışanları getirir.  

---

## 8. Belirli Bir Doğum Tarihine Sahip Çalışanları Listeleme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE DT = '1990-09-16';
```

**Açıklama:**  
- **DT** sütununda doğum tarihi **1990-09-16** olan çalışanları getirir.  
- Eğer belirli bir yıl içindeki tüm doğum tarihlerini listelemek istersek:  

  ```sql
  SELECT * FROM KurumsalCalısanlar 
  WHERE DT LIKE '1985%';
  ```
  - **'1985%'** → 1985 yılında doğan tüm çalışanları getirir.  

---

## 9. Cinsiyet, Ülke ve Maaş Koşullarını Birlikte Kullanma  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Ulke = 'Türkiye' AND Cinsiyet = 'Erkek' AND Maas > 4000;
```

**Açıklama:**  
- **AND** operatörü, tüm koşulların sağlandığı satırları getirir.  
- Bu sorgu, Türkiye’de çalışan, erkek olan ve maaşı **4000’den fazla** olan çalışanları listeler.  



22.10.2024



## 1. Türkiye'deki Kadın Çalışanları Listeleme  

```sql
SELECT *  
FROM KurumsalCalısanlar  
WHERE Cinsiyet = 'Kadin' AND Ulke = 'Türkiye';  
```

**Açıklama:**  
Bu sorgu, **Türkiye'deki kadın çalışanları** listelemek için **WHERE** koşulunu kullanır.

---


## 2. Ad, Cinsiyet ve Ülke Bilgilerini '-' Karakteri ile Birleştirme  

```sql
SELECT *,  
Ad + '-' + Cinsiyet AS Ad_Cinsiyet,  
CONCAT_WS('-', Ad, Ulke, Cinsiyet) AS Bilgiler  
FROM KurumsalCalısanlar;  
```

**Açıklama:**  
- **+** operatörü ile **Ad** ve **Cinsiyet** sütunları birleştirilerek **Ad_Cinsiyet** adıyla yeni bir sütun oluşturulmuştur.
- **CONCAT_WS** fonksiyonu, farklı sütunları belirli bir ayraç ile birleştirmek için kullanılmıştır.

---


## 3. İsimlerin İlk ve Son Harflerini Seçme  

```sql
SELECT *,  
LEFT(Ad, 1) AS Ilk_Harf,  
RIGHT(Ad, 1) AS Son_Harf  
FROM KurumsalCalısanlar;  
```

**Açıklama:**  
- **LEFT(Ad, 1)** fonksiyonu, adın ilk harfini döndürür.
- **RIGHT(Ad, 1)** fonksiyonu, adın son harfini döndürür.

---

## 4. Nisan Ayında Doğanları Listeleme  

```sql
SELECT *,  
FORMAT(DT, 'MMMM', 'TR-TR') AS Ay  
FROM KurumsalCalısanlar  
WHERE FORMAT(DT, 'MMMM', 'TR-TR') = 'Nisan';  
```

**Açıklama:**  
Bu sorgu, **DT** (doğum tarihi) sütunundan ay bilgisini çıkararak **Nisan** ayında doğanları listelemektedir.

---

## 5. 1985 Yılında Doğanları Listeleme  

**Yöntem 1: BETWEEN Kullanımı**
```sql
SELECT *  
FROM KurumsalCalısanlar  
WHERE DT BETWEEN '1985-01-01' AND '1985-12-31';  
```

**Yöntem 2: YEAR Fonksiyonu Kullanımı**
```sql
SELECT *  
FROM KurumsalCalısanlar  
WHERE YEAR(DT) = 1985;  
```

**Açıklama:**  
- **BETWEEN** kullanımı, belirli bir yıl aralığında olan doğum tarihlerini seçer.
- **YEAR(DT) = 1985** ifadesi, doğum yılını doğrudan filtrelemek için kullanılır.


31.10.2024


## 1. İsmi 4 Karakterden Oluşan Çalışanlar  

```sql
SELECT * 
FROM KurumsalCalısanlar
WHERE ad LIKE '____';
```

**Açıklama:**  
Bu sorgu, ismi **tam olarak 4 karakter uzunluğunda** olan çalışanları listeler. **_ (alt çizgi)** karakteri, her biri **tek bir harfi temsil edecek şekilde** kullanılmıştır.  

---

## 2. Maaşa Göre Kategorilendirme  

```sql
SELECT *,
CASE
    WHEN maas BETWEEN 0 AND 3000 THEN 'Düşük Maaş'
    WHEN maas BETWEEN 3001 AND 5000 THEN 'Orta Maaş'
    WHEN maas > 5000 THEN 'Yüksek Maaş'
    ELSE 'Geçersiz Maaş Değeri'
END AS Maaş_Kategorisi
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, çalışanların maaşlarını **düşük, orta ve yüksek** maaş olarak kategorilendirir. **CASE** ifadesi, koşullu veri manipülasyonu yapmak için kullanılmıştır.  

---

## 3. Çalışanları Doğum Yıllarına Göre Kategorize Etme  

```sql
SELECT *,
CASE
    WHEN YEAR(DT) <= 1985 THEN 'Yaşlı'
    WHEN YEAR(DT) BETWEEN 1986 AND 1996 THEN 'Genç'
    ELSE 'Çok Genç'
END AS Yas_Kategorisi
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, çalışanları **doğum yıllarına göre yaşlı, genç ve çok genç** olarak kategorize eder. **YEAR()** fonksiyonu ile doğum tarihinin yılı alınır.  

---

## 4. Yaşlı Çalışanları Listeleme  

```sql
SELECT *
FROM (
    SELECT *,
    CASE
        WHEN YEAR(DT) <= 1985 THEN 'Yaşlı'
        WHEN YEAR(DT) BETWEEN 1986 AND 1996 THEN 'Genç'
        ELSE 'Çok Genç'
    END AS Yas_Kategorisi
    FROM KurumsalCalısanlar
) AS Yasli_Calisanlar
WHERE Yas_Kategorisi = 'Yaşlı';
```

**Açıklama:**  
İç içe geçmiş **SELECT (Subquery)** yapısı kullanılarak, önce **Yaş Kategorisi** sütunu eklenmiş, ardından sadece **'Yaşlı'** kategorisine giren çalışanlar filtrelenmiştir.  

---

## 5. Yeni Bir Tablo Oluşturma ve Veri Ekleme  

```sql
CREATE TABLE KURS (
  Ogrenci_No INT PRIMARY KEY IDENTITY(1000,10),
  Ad VARCHAR(MAX),
  Yas TINYINT CHECK(Yas >= 0 AND Yas <= 105),
  Sehir VARCHAR(MAX) DEFAULT 'İzmir',
  TCKN BIGINT UNIQUE 
);
```

```sql
INSERT INTO KURS (Ad, Yas, Sehir, TCKN) VALUES
('Gamze', 24, 'İstanbul', 4000),
('Nursema', 24, 'İstanbul', 4001);
```

**Açıklama:**  
- **CREATE TABLE** komutu ile **KURS** adında yeni bir tablo oluşturulmuştur.  
- **IDENTITY(1000,10)**, öğrenci numarasının **1000'den başlayarak 10'ar artmasını** sağlar.  
- **CHECK** ifadesi, yaşın **0 ile 105 arasında olması gerektiğini** belirler.  
- **DEFAULT 'İzmir'**, şehir belirtilmediğinde varsayılan olarak **'İzmir'** değerinin atanmasını sağlar.  
- **INSERT INTO** komutu ile tabloya **iki yeni öğrenci eklenmiştir.**  

---

## 6. Kişi Tablosu Üzerinde Veri Güncelleme  

```sql
CREATE TABLE Kisi (
  ID INT PRIMARY KEY IDENTITY(1,1),
  Isim VARCHAR(MAX)
);
```

```sql
INSERT INTO Kisi (Isim) VALUES
('Hasan'),
('Berke'),
('Gül');
```

```sql
UPDATE Kisi
SET Isim = 'Hasancan'
WHERE ID = 1;

UPDATE Kisi
SET Isim = 'Berkecan'
WHERE ID = 2;

UPDATE Kisi
SET Isim = 'Gülcan'
WHERE ID = 3;
```

**Açıklama:**  
- **CREATE TABLE** ile **Kisi** tablosu oluşturulmuştur.  
- **INSERT INTO** ile tabloya **üç kişi eklenmiştir.**  
- **UPDATE** komutları ile isimler değiştirilmiştir. 

