18.10.2024

# Kurumsal Çalışanlar Tablosu Üzerinde SQL Sorguları  

Bu dosya, **KurumsalCalısanlar** tablosu üzerinde gerçekleştirilebilecek temel SQL sorgularını içermektedir. Aşağıda, **veri seçme (SELECT), filtreleme (WHERE), karşılaştırma operatörleri, LIKE ile desen eşleme ve IN/NOT IN kullanımı** gibi SQL'in temel konularını içeren sorgular bulunmaktadır.  

---

## 1. Çalışanların Zamlı Maaşlarını Hesaplama  

```sql
SELECT *, Maas + Maas * 50 / 100 AS ZAMLI_MAAŞ 
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, **Maas** sütunundaki değere %50 zam ekleyerek **ZAMLI_MAAŞ** adında yeni bir sütun oluşturur ve tüm çalışanların bilgileriyle birlikte gösterir.  

---

## 2. Çalışanlardan Belirli Kolonları Seçme ve İsimlendirme  

```sql
SELECT Ad, Cinsiyet, Ulke AS ÜLKE 
FROM KurumsalCalısanlar;
```

**Açıklama:**  
- **AS** anahtar kelimesi, sütuna yeni bir ad vermek için kullanılır. Burada **Ulke** sütunu **ÜLKE** olarak yeniden adlandırılmıştır.  
- Bu sorgu, tüm çalışanların adlarını, cinsiyetlerini ve ülkelerini getirir.  

---

## 3. Belirli Bir Çalışanı Filtreleme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Ad = 'Onur';
```

**Açıklama:**  
- **WHERE** ifadesi belirli koşullara göre filtreleme yapmak için kullanılır.  
- Bu sorgu, adı "Onur" olan çalışanları getirir.  

---

## 4. Türkiye Dışındaki Çalışanları Listeleme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Ulke <> 'Türkiye';
```

**Açıklama:**  
- **<>** operatörü, **eşit değildir** anlamına gelir.  
- Alternatif olarak **!=** de kullanılabilir.  
- Bu sorgu, Türkiye dışında çalışan kişileri listeler.  

---

## 5. Maaşı Belirli Bir Aralıkta Olan Çalışanları Getirme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Maas BETWEEN 5000 AND 9000;
```

**Açıklama:**  
- **BETWEEN … AND …** ifadesi, iki değer arasındaki sonuçları filtrelemek için kullanılır.  
- Bu sorgu, maaşı **5000 ile 9000 arasında** olan çalışanları listeler.  

---

## 6. Belirli Ülkelerde Çalışanları Listeleme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE ULKE IN ('Türkiye', 'Fransa', 'Amerika');
```

**Açıklama:**  
- **IN** ifadesi, **OR** operatörünün daha kısa ve okunaklı bir alternatifidir.  
- Alternatif olarak şu şekilde de yazılabilir:  

  ```sql
  SELECT * FROM KurumsalCalısanlar 
  WHERE ULKE = 'Türkiye' OR Ulke = 'Fransa' OR Ulke = 'Amerika';
  ```
- Her iki sorgu da Türkiye, Fransa veya Amerika'da çalışanları listeler.  

---

## 7. LIKE Operatörü ile Metin Arama  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Ad LIKE 'O%';
```

**Açıklama:**  
- **LIKE** ifadesi, belirli bir desene uyan verileri getirmek için kullanılır.  
- **'O%'** ifadesi, "O" harfiyle başlayan tüm çalışanları getirir.  
- Alternatif kullanımlar:  
  - **'%T'** → "T" harfiyle biten çalışanları getirir.  
  - **'%U%'** → Adının içinde "U" harfi geçen çalışanları getirir.  
  - **'____'** → 4 harfli isimlere sahip çalışanları getirir.  

---

## 8. Belirli Bir Doğum Tarihine Sahip Çalışanları Listeleme  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE DT = '1990-09-16';
```

**Açıklama:**  
- **DT** sütununda doğum tarihi **1990-09-16** olan çalışanları getirir.  
- Eğer belirli bir yıl içindeki tüm doğum tarihlerini listelemek istersek:  

  ```sql
  SELECT * FROM KurumsalCalısanlar 
  WHERE DT LIKE '1985%';
  ```
  - **'1985%'** → 1985 yılında doğan tüm çalışanları getirir.  

---

## 9. Cinsiyet, Ülke ve Maaş Koşullarını Birlikte Kullanma  

```sql
SELECT * FROM KurumsalCalısanlar 
WHERE Ulke = 'Türkiye' AND Cinsiyet = 'Erkek' AND Maas > 4000;
```

**Açıklama:**  
- **AND** operatörü, tüm koşulların sağlandığı satırları getirir.  
- Bu sorgu, Türkiye’de çalışan, erkek olan ve maaşı **4000’den fazla** olan çalışanları listeler.  



22.10.2024



## 1. Türkiye'deki Kadın Çalışanları Listeleme  

```sql
SELECT *  
FROM KurumsalCalısanlar  
WHERE Cinsiyet = 'Kadin' AND Ulke = 'Türkiye';  
```

**Açıklama:**  
Bu sorgu, **Türkiye'deki kadın çalışanları** listelemek için **WHERE** koşulunu kullanır.

---


## 2. Ad, Cinsiyet ve Ülke Bilgilerini '-' Karakteri ile Birleştirme  

```sql
SELECT *,  
Ad + '-' + Cinsiyet AS Ad_Cinsiyet,  
CONCAT_WS('-', Ad, Ulke, Cinsiyet) AS Bilgiler  
FROM KurumsalCalısanlar;  
```

**Açıklama:**  
- **+** operatörü ile **Ad** ve **Cinsiyet** sütunları birleştirilerek **Ad_Cinsiyet** adıyla yeni bir sütun oluşturulmuştur.
- **CONCAT_WS** fonksiyonu, farklı sütunları belirli bir ayraç ile birleştirmek için kullanılmıştır.

---


## 3. İsimlerin İlk ve Son Harflerini Seçme  

```sql
SELECT *,  
LEFT(Ad, 1) AS Ilk_Harf,  
RIGHT(Ad, 1) AS Son_Harf  
FROM KurumsalCalısanlar;  
```

**Açıklama:**  
- **LEFT(Ad, 1)** fonksiyonu, adın ilk harfini döndürür.
- **RIGHT(Ad, 1)** fonksiyonu, adın son harfini döndürür.

---

## 4. Nisan Ayında Doğanları Listeleme  

```sql
SELECT *,  
FORMAT(DT, 'MMMM', 'TR-TR') AS Ay  
FROM KurumsalCalısanlar  
WHERE FORMAT(DT, 'MMMM', 'TR-TR') = 'Nisan';  
```

**Açıklama:**  
Bu sorgu, **DT** (doğum tarihi) sütunundan ay bilgisini çıkararak **Nisan** ayında doğanları listelemektedir.

---

## 5. 1985 Yılında Doğanları Listeleme  

**Yöntem 1: BETWEEN Kullanımı**
```sql
SELECT *  
FROM KurumsalCalısanlar  
WHERE DT BETWEEN '1985-01-01' AND '1985-12-31';  
```

**Yöntem 2: YEAR Fonksiyonu Kullanımı**
```sql
SELECT *  
FROM KurumsalCalısanlar  
WHERE YEAR(DT) = 1985;  
```

**Açıklama:**  
- **BETWEEN** kullanımı, belirli bir yıl aralığında olan doğum tarihlerini seçer.
- **YEAR(DT) = 1985** ifadesi, doğum yılını doğrudan filtrelemek için kullanılır.


31.10.2024


## 1. İsmi 4 Karakterden Oluşan Çalışanlar  

```sql
SELECT * 
FROM KurumsalCalısanlar
WHERE ad LIKE '____';
```

**Açıklama:**  
Bu sorgu, ismi **tam olarak 4 karakter uzunluğunda** olan çalışanları listeler. **_ (alt çizgi)** karakteri, her biri **tek bir harfi temsil edecek şekilde** kullanılmıştır.  

---

## 2. Maaşa Göre Kategorilendirme  

```sql
SELECT *,
CASE
    WHEN maas BETWEEN 0 AND 3000 THEN 'Düşük Maaş'
    WHEN maas BETWEEN 3001 AND 5000 THEN 'Orta Maaş'
    WHEN maas > 5000 THEN 'Yüksek Maaş'
    ELSE 'Geçersiz Maaş Değeri'
END AS Maaş_Kategorisi
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, çalışanların maaşlarını **düşük, orta ve yüksek** maaş olarak kategorilendirir. **CASE** ifadesi, koşullu veri manipülasyonu yapmak için kullanılmıştır.  

---

## 3. Çalışanları Doğum Yıllarına Göre Kategorize Etme  

```sql
SELECT *,
CASE
    WHEN YEAR(DT) <= 1985 THEN 'Yaşlı'
    WHEN YEAR(DT) BETWEEN 1986 AND 1996 THEN 'Genç'
    ELSE 'Çok Genç'
END AS Yas_Kategorisi
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, çalışanları **doğum yıllarına göre yaşlı, genç ve çok genç** olarak kategorize eder. **YEAR()** fonksiyonu ile doğum tarihinin yılı alınır.  

---

## 4. Yaşlı Çalışanları Listeleme  

```sql
SELECT *
FROM (
    SELECT *,
    CASE
        WHEN YEAR(DT) <= 1985 THEN 'Yaşlı'
        WHEN YEAR(DT) BETWEEN 1986 AND 1996 THEN 'Genç'
        ELSE 'Çok Genç'
    END AS Yas_Kategorisi
    FROM KurumsalCalısanlar
) AS Yasli_Calisanlar
WHERE Yas_Kategorisi = 'Yaşlı';
```

**Açıklama:**  
İç içe geçmiş **SELECT (Subquery)** yapısı kullanılarak, önce **Yaş Kategorisi** sütunu eklenmiş, ardından sadece **'Yaşlı'** kategorisine giren çalışanlar filtrelenmiştir.  

---

## 5. Yeni Bir Tablo Oluşturma ve Veri Ekleme  

```sql
CREATE TABLE KURS (
  Ogrenci_No INT PRIMARY KEY IDENTITY(1000,10),
  Ad VARCHAR(MAX),
  Yas TINYINT CHECK(Yas >= 0 AND Yas <= 105),
  Sehir VARCHAR(MAX) DEFAULT 'İzmir',
  TCKN BIGINT UNIQUE 
);
```

```sql
INSERT INTO KURS (Ad, Yas, Sehir, TCKN) VALUES
('Gamze', 24, 'İstanbul', 4000),
('Nursema', 24, 'İstanbul', 4001);
```

**Açıklama:**  
- **CREATE TABLE** komutu ile **KURS** adında yeni bir tablo oluşturulmuştur.  
- **IDENTITY(1000,10)**, öğrenci numarasının **1000'den başlayarak 10'ar artmasını** sağlar.  
- **CHECK** ifadesi, yaşın **0 ile 105 arasında olması gerektiğini** belirler.  
- **DEFAULT 'İzmir'**, şehir belirtilmediğinde varsayılan olarak **'İzmir'** değerinin atanmasını sağlar.  
- **INSERT INTO** komutu ile tabloya **iki yeni öğrenci eklenmiştir.**  

---

## 6. Kişi Tablosu Üzerinde Veri Güncelleme  

```sql
CREATE TABLE Kisi (
  ID INT PRIMARY KEY IDENTITY(1,1),
  Isim VARCHAR(MAX)
);
```

```sql
INSERT INTO Kisi (Isim) VALUES
('Hasan'),
('Berke'),
('Gül');
```

```sql
UPDATE Kisi
SET Isim = 'Hasancan'
WHERE ID = 1;

UPDATE Kisi
SET Isim = 'Berkecan'
WHERE ID = 2;

UPDATE Kisi
SET Isim = 'Gülcan'
WHERE ID = 3;
```

**Açıklama:**  
- **CREATE TABLE** ile **Kisi** tablosu oluşturulmuştur.  
- **INSERT INTO** ile tabloya **üç kişi eklenmiştir.**  
- **UPDATE** komutları ile isimler değiştirilmiştir. 



08.11.2024

# AdventureWorks Person.Person Tablosu Üzerinde SQL Sorguları

Bu dosya, **AdventureWorks** veritabanındaki **Person.Person** ve **KurumsalCalısanlar** tabloları üzerinde gerçekleştirilebilecek SQL sorgularını içermektedir. **Veri seçme (SELECT), filtreleme (WHERE), gruplama (GROUP BY), koşullu filtreleme (HAVING) ve tarih fonksiyonları** gibi konulara odaklanılmıştır.

---

## 1. Title Sütunundaki Null ve Tekrar Eden Değerleri İnceleme

```sql
SELECT 
    COUNT(*) AS SATIR_SAYISI,
    COUNT(Title) AS DOLU_TITLE_SAYISI,
    COUNT(DISTINCT Title) AS TEKIL_TITLE_SAYISI
FROM Person.Person;
```

**Açıklama:**
Bu sorgu, **Person.Person** tablosundaki **Title** sütununun null değer içerip içermediğini ve kaç farklı başlık olduğunu analiz eder.

---

# Kurumsal Çalışanlar Tablosu Üzerinde SQL Sorguları

## 2. Maaşlar Üzerinde İstatistiksel Hesaplamalar

```sql
SELECT 
    SUM(MAAS) AS TOPLAM,
    AVG(MAAS) AS ORT,
    MAX(MAAS) AS MAK_MAAS,
    MIN(MAAS) AS MIN_MAAS,
    COUNT(*) AS SATIR_SAYISI,
    COUNT(ID) AS KISI_ADEDI,
    COUNT(DISTINCT ID) AS TEKIL_ID_SAYISI
FROM KurumsalCalısanlar;
```

**Açıklama:**
Bu sorgu, çalışanların maaşlarının toplamını, ortalamasını, maksimum ve minimum maaşlarını hesaplar. **COUNT(ID)** ve **COUNT(DISTINCT ID)** kullanarak çalışanların sayısı ve tekil çalışan sayısı belirlenir.

---

## 3. Ülkelerdeki Çalışan Sayısı ve Maaş Dağılımı

```sql
SELECT 
    ulke,
    SUM(maas) AS TOPLAM_MAAS,
    AVG(maas) AS ORTALAMA_MAAS,
    MAX(maas) AS MAKSIMUM_MAAS,
    MIN(maas) AS MINIMUM_MAAS,
    COUNT(id) AS CALISAN_SAYISI
FROM KurumsalCalısanlar
GROUP BY ulke;
```

**Açıklama:**
Bu sorgu, **ülke bazında çalışan sayısını** ve maaş istatistiklerini gösterir. **GROUP BY ulke** ile her ülke için ayrı hesaplama yapılır.

---

## 4. Doğum Yılı Bazında Çalışan Sayıları

```sql
SELECT 
    YEAR(dt) AS DOGUM_YILI,
    COUNT(id) AS CALISAN_SAYISI
FROM KurumsalCalısanlar
GROUP BY YEAR(dt);
```

**Açıklama:**
Bu sorgu, çalışanları **doğum yıllarına göre gruplar** ve her yıl kaç çalışan olduğunu gösterir.

---

## 5. Maaş Toplamı 10.000 TL'den Büyük Olan Ülkeleri Filtreleme

```sql
SELECT 
    ulke,
    SUM(maas) AS TOPLAM_MAAS
FROM KurumsalCalısanlar
GROUP BY ulke
HAVING SUM(maas) > 10000;
```

**Açıklama:**
Bu sorgu, **maaş toplamı 10.000 TL’den büyük olan ülkeleri filtreler**. **HAVING** ifadesi, gruplama yapıldıktan sonra filtreleme işlemi için kullanılır.

---

## 6. Tecrübe Yılına Göre Maaş Ortalaması ve Çalışan Sayısı

```sql
SELECT 
    DATEDIFF(YEAR, ise_giris_tarihi, '2024-08-11') AS TECRUBE_YILI,
    AVG(maas) AS ORTALAMA_MAAS,
    COUNT(id) AS CALISAN_SAYISI
FROM KurumsalCalısanlar
GROUP BY DATEDIFF(YEAR, ise_giris_tarihi, '2024-08-11');
```

**Açıklama:**
Bu sorgu, **çalışanların tecrübe yıllarına göre ortalama maaşlarını ve çalışan sayılarını hesaplar.**

---

## 7. Türkiye’deki Toplam Maaş Hesaplaması

**1. Yöntem (WHERE Kullanımı)**
```sql
SELECT ulke, SUM(maas) AS TOPLAM_MAAS 
FROM KurumsalCalısanlar
WHERE ulke = 'Türkiye'
GROUP BY ulke;
```

**2. Yöntem (HAVING Kullanımı)**
```sql
SELECT ulke, SUM(maas) AS TOPLAM_MAAS 
FROM KurumsalCalısanlar
GROUP BY ulke
HAVING ulke = 'Türkiye';
```

**Açıklama:**
- **WHERE** ham veriyi filtreler ve gruplamadan önce kullanılır. **Daha hızlı çalışır.**
- **HAVING** gruplandıktan sonra filtreleme yapar. **Gruplanmış veri üzerinde işlem yaparken kullanılır.**


12.11.2024


## 1. Ülkeye Göre Maaş Toplamı ve Ortalaması  

```sql
SELECT 
    ulke, 
    SUM(maas) AS toplam_maas, 
    AVG(maas) AS ortalama_maas
FROM KurumsalCalısanlar
GROUP BY ulke;
```

**Açıklama:**  
Bu sorgu, **ülke bazında maaş toplamını ve ortalamasını hesaplar**. **GROUP BY** ifadesi sayesinde her ülke için ayrı bir satır oluşturulur.

---

## 2. Ülkeye Göre Maaş Toplamı ve Çalışan Sayısı  

```sql
SELECT 
    ulke, 
    SUM(maas) AS toplam_maas, 
    COUNT(id) AS calisan_sayisi
FROM KurumsalCalısanlar
GROUP BY ulke;
```

**Açıklama:**  
Bu sorgu, her ülke için **toplam maaş miktarını ve çalışan sayısını hesaplar**.

---

## 3. Doğum Yılı Bazında Çalışan Sayısı  

```sql
SELECT 
    YEAR(dt) AS dogum_yili, 
    COUNT(id) AS kisi_sayisi
FROM KurumsalCalısanlar
GROUP BY YEAR(dt);
```

**Açıklama:**  
Çalışanların **doğum yılı bazında kaç kişi olduğunu** hesaplar.

---

## 4. Maaş Kategorilerine Göre Çalışan Sayısı  

```sql
SELECT 
    CASE
        WHEN Maas <= 3000 THEN 'DÜŞÜK'
        WHEN Maas BETWEEN 3001 AND 5000 THEN 'ORTA'
        ELSE 'YÜKSEK'
    END AS maas_kategori, 
    COUNT(ID) AS kisi_sayisi
FROM KurumsalCalısanlar
GROUP BY 
    CASE
        WHEN Maas <= 3000 THEN 'DÜŞÜK'
        WHEN Maas BETWEEN 3001 AND 5000 THEN 'ORTA'
        ELSE 'YÜKSEK'
    END;
```

**Açıklama:**  
Bu sorgu, çalışanları **maaş aralıklarına göre** gruplandırarak her kategori için kaç kişi olduğunu gösterir.

---

## 5. Doğum Ayı Bazında Çalışan Sayısı  

```sql
SELECT 
    FORMAT(dt, 'MMMM', 'TR-TR') AS ay_adi, 
    COUNT(id) AS kisi_sayisi
FROM KurumsalCalısanlar
GROUP BY FORMAT(dt, 'MMMM', 'TR-TR');
```

**Açıklama:**  
Çalışanların **doğum ayına göre kaç kişi olduğunu hesaplar**.

---

## 6. En Yüksek Maaşı Alan Çalışan(lar)  

```sql
SELECT TOP 1 WITH TIES * FROM KurumsalCalısanlar
ORDER BY maas DESC;
```

**Açıklama:**  
Bu sorgu, en yüksek maaşı alan **tüm çalışanları listeler**. **WITH TIES** kullanıldığı için birden fazla çalışan aynı maaşı alıyorsa hepsi gösterilir.

---

## 7. Ortalama Maaştan Yüksek Maaş Alan Çalışanlar  

```sql
SELECT * FROM KurumsalCalısanlar
WHERE maas >= (SELECT AVG(maas) FROM KurumsalCalısanlar);
```

**Açıklama:**  
Bu sorgu, **ortalama maaştan yüksek maaş alan çalışanları** listeler.

---

## 8. Maaş Toplamı 10.000'den Büyük Olan Ülkeler  

```sql
SELECT ulke, SUM(maas) AS toplam_maas 
FROM KurumsalCalısanlar
GROUP BY ulke
HAVING SUM(maas) > 10000;
```

**Açıklama:**  
Bu sorgu, **maaş toplamı 10.000'den büyük olan ülkeleri filtreler**.

---

## 9. Türkiye’deki Erkek Çalışanlar ve Maaşlarına Göre Sıralama  

```sql
SELECT * FROM KurumsalCalısanlar
WHERE ulke = 'Türkiye' AND cinsiyet = 'Erkek'
ORDER BY maas DESC;
```

**Açıklama:**  
Bu sorgu, **sadece Türkiye'deki erkek çalışanları getirir** ve maaşlarına göre **büyükten küçüğe sıralar**.

---

## 10. Çalışanların Maaşının Ortalama Maaşa Olan Farkı  

```sql
SELECT *, 
    (SELECT AVG(maas) FROM KurumsalCalısanlar) AS genel_ort, 
    maas - (SELECT AVG(maas) FROM KurumsalCalısanlar) AS ortalama_uzaklik 
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, her çalışanın maaşının **ortalama maaşa olan farkını hesaplar**.

---

## 11. Çalışanların Doğum Tarihi ve İşe Giriş Tarihi Arasındaki Gün Farkı  

```sql
SELECT *, 
    DATEDIFF(DAY, dt, Is_Giris_Tarihi) AS fark_gun
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, her çalışan için **doğum tarihi ile işe giriş tarihi arasındaki farkı gün cinsinden hesaplar**.

---


13.11.2024


## 1. En Düşük Maaşı Alan Personel veya Personeller  

```sql
SELECT TOP 1 WITH TIES * FROM KurumsalCalısanlar
ORDER BY maas;
```

**Açıklama:**  
Bu sorgu, en düşük maaşı alan tüm personelleri listeler. Eğer birden fazla kişi aynı en düşük maaşı alıyorsa, **WITH TIES** kullanımı sayesinde hepsi getirilir.  

---

## 2. En Yüksek Maaşı Alan Kişinin Bilgilerini Alt Sorgu ile Getirme  

```sql
SELECT TOP 1 WITH TIES * FROM KurumsalCalısanlar
ORDER BY maas DESC;
```

**Açıklama:**  
Bu sorgu, en yüksek maaşı alan çalışan(lar)ı getirir. **WITH TIES** ile, eğer birden fazla kişi en yüksek maaşı alıyorsa, hepsi görüntülenir.  

---

## 3. Herkesin Maaşını Ortalama Maaştan Çıkartma  

```sql
SELECT  
*,
(SELECT AVG(maas) FROM KurumsalCalısanlar) AS genel_ortalama,
maas - (SELECT AVG(maas) FROM KurumsalCalısanlar) AS ortalama_uzaklık 
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, her çalışanın maaşını **ortalama maaştan çıkartarak** farkını hesaplar ve yeni bir sütunda gösterir.  

---

## 4. Cinsiyet Bazında Ortalama Maaş Hesaplama  

```sql
SELECT cinsiyet, AVG(maas) AS ortalama_maas 
FROM KurumsalCalısanlar
GROUP BY cinsiyet;
```

**Açıklama:**  
Bu sorgu, **cinsiyete göre gruplama yaparak** her cinsiyet için ortalama maaşı hesaplar. **GROUP BY** kullanımı ham veriyi gruplar ve özetler.  

---

## 5. Her Personelin Kendi Cinsiyet Grubundaki Maaş Ortalamasına Olan Uzaklığı  

### Yöntem 1 (Alt Sorgular ile)  
```sql
SELECT *,
CASE
    WHEN Cinsiyet = 'Erkek' THEN (SELECT AVG(MAAS) FROM KurumsalCalısanlar WHERE Cinsiyet = 'Erkek')
    ELSE (SELECT AVG(MAAS) FROM KurumsalCalısanlar WHERE Cinsiyet = 'Kadın')
END AS cinsiyet_ortalaması,
(SELECT AVG(MAAS) FROM KurumsalCalısanlar) AS genel_ortalama
FROM KurumsalCalısanlar;
```

### Yöntem 2 (Window Fonksiyonları ile - Daha Performanslı)  
```sql
SELECT
*,
AVG(maas) OVER() AS genel_ortalama,
AVG(maas) OVER(PARTITION BY cinsiyet) AS cinsiyet_bazlı_ort,
AVG(maas) OVER(PARTITION BY ulke) AS ulke_bazlı_ort,
SUM(maas) OVER(PARTITION BY ulke) AS ulke_bazlı_toplam,
COUNT(id) OVER(PARTITION BY cinsiyet) AS cinsiyet_bazlı_say,
MAX(maas) OVER() AS en_yüksek_maas,
MAX(maas) OVER(PARTITION BY cinsiyet) AS cinsiyet_bazlı_max,
MIN(maas) OVER(PARTITION BY cinsiyet) AS cinsiyet_bazlı_min
FROM KurumsalCalısanlar;
```

**Açıklama:**  
- **PARTITION BY** kullanımı, her satır için **grup bazlı** hesaplama yapar.  
- **AVG() OVER()** kullanımı, genel ve grup bazlı ortalamaları bozmadan yeni sütunlara ekler.  

---

## 6. En Yüksek Maaşı Alan Kişinin Adını Yeni Sütunda Yazdırma  

### Yöntem 1 (Alt Sorgu - Performans Açısından Problemli)  
```sql
SELECT *,
(SELECT ad FROM KurumsalCalısanlar WHERE maas = (SELECT MAX(maas) FROM KurumsalCalısanlar)) AS en_yüksek_maas_kisi
FROM KurumsalCalısanlar;
```

### Yöntem 2 (FIRST_VALUE Fonksiyonu ile - Daha Performanslı)  
```sql
SELECT *,
FIRST_VALUE(ad) OVER(ORDER BY maas DESC) AS en_yüksek_maas_kisi,
FIRST_VALUE(ad) OVER(PARTITION BY cinsiyet ORDER BY maas DESC) AS cinsiyet_bazlı_en_yüksek,
FIRST_VALUE(ad) OVER(PARTITION BY ulke ORDER BY maas DESC) AS ulke_bazlı_en_yüksek
FROM KurumsalCalısanlar;
```

**Açıklama:**  
- **FIRST_VALUE()** kullanımı, belirli bir sıralama içerisinde **ilk değeri alır.**  

---

## 7. View (Sanal Tablo) Oluşturma  

```sql
CREATE VIEW Ekin AS
SELECT *,
CASE
    WHEN ulke IN ('Estonya','Fransa') THEN 'AVRUPA'
    WHEN ulke IN ('Türkiye','Rusya') THEN 'ASYA'
    ELSE 'AMERİKA'
END AS Kıta
FROM KurumsalCalısanlar;
```

```sql
SELECT * FROM Ekin;
```

**Açıklama:**  
- **VIEW**, bir sorgu sonucunu **sanal bir tablo** gibi saklar.  
- **ALTER VIEW** ile var olan bir görünüm güncellenebilir, **DROP VIEW** ile silinebilir.  

---

## 8. İşe Giriş Tarihi ve Doğum Tarihi Arasındaki Gün Farkı  

```sql
SELECT *, DATEDIFF(day, DT, İşe_Giriş_Tarihi) AS fark_gun 
FROM KurumsalCalısanlar;
```

**Açıklama:**  
Bu sorgu, **DATEDIFF()** fonksiyonunu kullanarak doğum tarihi (**DT**) ile işe giriş tarihi (**İşe_Giriş_Tarihi**) arasındaki farkı gün cinsinden hesaplar.  

---

## 9. Ad, Cinsiyet ve Ülke Kolonlarını Birleştirerek Yeni Bir Sütun Oluşturma  

```sql
SELECT *, CONCAT_WS('-', Ad, Ulke, Cinsiyet) AS kimlik_bilgisi
FROM KurumsalCalısanlar;
```

**Açıklama:**  
- **CONCAT_WS()** kullanılarak, **Ad, Ulke ve Cinsiyet** sütunları arasına "-" karakteri eklenerek birleştirilir.  

---

